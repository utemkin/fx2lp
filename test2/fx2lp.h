#ifndef __FX2LP
#define __FX2LP

#include "config.h"
#include "compiler.h"

DECLARE_SFR(IOA,0x80);
    DECLARE_SFR_BIT(PA0,0x80,0);
    DECLARE_SFR_BIT(PA1,0x80,1);
    DECLARE_SFR_BIT(PA2,0x80,2);
    DECLARE_SFR_BIT(PA3,0x80,3);
    DECLARE_SFR_BIT(PA4,0x80,4);
    DECLARE_SFR_BIT(PA5,0x80,5);
    DECLARE_SFR_BIT(PA6,0x80,6);
    DECLARE_SFR_BIT(PA7,0x80,7);
DECLARE_SFR(SP,0x81);
DECLARE_SFR(DPL0,0x82);
DECLARE_SFR(DPH0,0x83);
DECLARE_SFR(DPL1,0x84);
DECLARE_SFR(DPH1,0x85);
DECLARE_SFR(DPS,0x86);
DECLARE_SFR(PCON,0x87);
DECLARE_SFR(TCON,0x88);
    DECLARE_SFR_BIT(IT0,0x88,0);
    DECLARE_SFR_BIT(IE0,0x88,1);
    DECLARE_SFR_BIT(IT1,0x88,2);
    DECLARE_SFR_BIT(IE1,0x88,3);
    DECLARE_SFR_BIT(TR0,0x88,4);
    DECLARE_SFR_BIT(TF0,0x88,5);
    DECLARE_SFR_BIT(TR1,0x88,6);
    DECLARE_SFR_BIT(TF1,0x88,7);
DECLARE_SFR(TMOD,0x89);
DECLARE_SFR(TL0,0x8a);
DECLARE_SFR(TL1,0x8b);
DECLARE_SFR(TH0,0x8c);
DECLARE_SFR(TH1,0x8d);
DECLARE_SFR(CKCON,0x8e);

DECLARE_SFR(IOB,0x90);
    DECLARE_SFR_BIT(PB0,0x90,0);
    DECLARE_SFR_BIT(PB1,0x90,1);
    DECLARE_SFR_BIT(PB2,0x90,2);
    DECLARE_SFR_BIT(PB3,0x90,3);
    DECLARE_SFR_BIT(PB4,0x90,4);
    DECLARE_SFR_BIT(PB5,0x90,5);
    DECLARE_SFR_BIT(PB6,0x90,6);
    DECLARE_SFR_BIT(PB7,0x90,7);
DECLARE_SFR(EXIF,0x91);
DECLARE_SFR(MPAGE,0x92);
#ifdef COMPILER_SDCC
DECLARE_SFR(_XPAGE,0x92);
#endif
DECLARE_SFR(SCON0,0x98);
    DECLARE_SFR_BIT(RI_0,0x98,0);
    DECLARE_SFR_BIT(TI_0,0x98,1);
    DECLARE_SFR_BIT(RB8_0,0x98,2);
    DECLARE_SFR_BIT(TB8_0,0x98,3);
    DECLARE_SFR_BIT(REN_0,0x98,4);
    DECLARE_SFR_BIT(SM2_0,0x98,5);
    DECLARE_SFR_BIT(SM1_0,0x98,6);
    DECLARE_SFR_BIT(SM0_0,0x98,7);
DECLARE_SFR(SBUF0,0x99);
DECLARE_SFR(AUTOPTRH1,0x9a);
DECLARE_SFR(AUTOPTRL1,0x9b);
DECLARE_SFR(AUTOPTRH2,0x9d);
DECLARE_SFR(AUTOPTRL2,0x9e);

DECLARE_SFR(IOC,0xa0);
    DECLARE_SFR_BIT(PC0,0xa0,0);
    DECLARE_SFR_BIT(PC1,0xa0,1);
    DECLARE_SFR_BIT(PC2,0xa0,2);
    DECLARE_SFR_BIT(PC3,0xa0,3);
    DECLARE_SFR_BIT(PC4,0xa0,4);
    DECLARE_SFR_BIT(PC5,0xa0,5);
    DECLARE_SFR_BIT(PC6,0xa0,6);
    DECLARE_SFR_BIT(PC7,0xa0,7);
DECLARE_SFR(INT2CLR,0xa1);
DECLARE_SFR(INT4CLR,0xa2);
DECLARE_SFR(IE,0xa8);
    DECLARE_SFR_BIT(EX0,0xa8,0);
    DECLARE_SFR_BIT(ET0,0xa8,1);
    DECLARE_SFR_BIT(EX1,0xa8,2);
    DECLARE_SFR_BIT(ET1,0xa8,3);
    DECLARE_SFR_BIT(ES0,0xa8,4);
    DECLARE_SFR_BIT(ET2,0xa8,5);
    DECLARE_SFR_BIT(ES1,0xa8,6);
    DECLARE_SFR_BIT(EA,0xa8,7);
DECLARE_SFR(EP2468STAT,0xaa);
DECLARE_SFR(EP24FIFOFLGS,0xab);
DECLARE_SFR(EP68FIFOFLGS,0xac);
DECLARE_SFR(AUTOPTRSETUP,0xaf);

DECLARE_SFR(IOD,0xb0);
    DECLARE_SFR_BIT(PD0,0xb0,0);
    DECLARE_SFR_BIT(PD1,0xb0,1);
    DECLARE_SFR_BIT(PD2,0xb0,2);
    DECLARE_SFR_BIT(PD3,0xb0,3);
    DECLARE_SFR_BIT(PD4,0xb0,4);
    DECLARE_SFR_BIT(PD5,0xb0,5);
    DECLARE_SFR_BIT(PD6,0xb0,6);
    DECLARE_SFR_BIT(PD7,0xb0,7);
DECLARE_SFR(IOE,0xb1);
DECLARE_SFR(OEA,0xb2);
DECLARE_SFR(OEB,0xb3);
DECLARE_SFR(OEC,0xb4);
DECLARE_SFR(OED,0xb5);
DECLARE_SFR(OEE,0xb6);
DECLARE_SFR(IP,0xb8);
    DECLARE_SFR_BIT(PX0,0xb8,0);
    DECLARE_SFR_BIT(PT0,0xb8,1);
    DECLARE_SFR_BIT(PX1,0xb8,2);
    DECLARE_SFR_BIT(PT1,0xb8,3);
    DECLARE_SFR_BIT(PS0,0xb8,4);
    DECLARE_SFR_BIT(PT2,0xb8,5);
    DECLARE_SFR_BIT(PS1,0xb8,6);
DECLARE_SFR(EP01STAT,0xba);
DECLARE_SFR(GPIFTRIG,0xbb);
DECLARE_SFR(GPIFSGLDATH,0xbd);
DECLARE_SFR(GPIFSGLDATLX,0xbe);
DECLARE_SFR(GPIFSGLDATLNOX,0xbf);

DECLARE_SFR(SCON1,0xc0);
    DECLARE_SFR_BIT(RI_1,0xc0,0);
    DECLARE_SFR_BIT(TI_1,0xc0,1);
    DECLARE_SFR_BIT(RB8_1,0xc0,2);
    DECLARE_SFR_BIT(TB8_1,0xc0,3);
    DECLARE_SFR_BIT(REN_1,0xc0,4);
    DECLARE_SFR_BIT(SM2_1,0xc0,5);
    DECLARE_SFR_BIT(SM1_1,0xc0,6);
    DECLARE_SFR_BIT(SM0_1,0xc0,7);
DECLARE_SFR(SBUF1,0xc1);
DECLARE_SFR(T2CON,0xc8);
    DECLARE_SFR_BIT(CPRL2,0xc8,0);
    DECLARE_SFR_BIT(CT2,0xc8,1);
    DECLARE_SFR_BIT(TR2,0xc8,2);
    DECLARE_SFR_BIT(EXEN2,0xc8,3);
    DECLARE_SFR_BIT(TCLK,0xc8,4);
    DECLARE_SFR_BIT(RCLK,0xc8,5);
    DECLARE_SFR_BIT(EXF2,0xc8,6);
    DECLARE_SFR_BIT(TF2,0xc8,7);
DECLARE_SFR(RCAP2L,0xca);
DECLARE_SFR(RCAP2H,0xcb);
DECLARE_SFR(TL2,0xcc);
DECLARE_SFR(TH2,0xcd);

DECLARE_SFR(PSW,0xd0);
    DECLARE_SFR_BIT(P,0xd0,0);
    DECLARE_SFR_BIT(F1,0xd0,1);
    DECLARE_SFR_BIT(OV,0xd0,2);
    DECLARE_SFR_BIT(RS0,0xd0,3);
    DECLARE_SFR_BIT(RS1,0xd0,4);
    DECLARE_SFR_BIT(F0,0xd0,5);
    DECLARE_SFR_BIT(AC,0xd0,6);
    DECLARE_SFR_BIT(CY,0xd0,7);
DECLARE_SFR(EICON,0xd8);
    DECLARE_SFR_BIT(INT6,0xd8,3);
    DECLARE_SFR_BIT(RESI,0xd8,4);
    DECLARE_SFR_BIT(ERESI,0xd8,5);
    DECLARE_SFR_BIT(SMOD1,0xd8,7);

DECLARE_SFR(ACC,0xe0);
    DECLARE_SFR_BIT(ACC0,0xe0,0);
    DECLARE_SFR_BIT(ACC1,0xe0,1);
    DECLARE_SFR_BIT(ACC2,0xe0,2);
    DECLARE_SFR_BIT(ACC3,0xe0,3);
    DECLARE_SFR_BIT(ACC4,0xe0,4);
    DECLARE_SFR_BIT(ACC5,0xe0,5);
    DECLARE_SFR_BIT(ACC6,0xe0,6);
    DECLARE_SFR_BIT(ACC7,0xe0,7);
DECLARE_SFR(EIE,0xe8);
    DECLARE_SFR_BIT(EUSB,0xe8,0);
    DECLARE_SFR_BIT(EI2C,0xe8,1);
    DECLARE_SFR_BIT(EX4,0xe8,2);
    DECLARE_SFR_BIT(EX5,0xe8,3);
    DECLARE_SFR_BIT(EX6,0xe8,4);

DECLARE_SFR(B,0xf0);
    DECLARE_SFR_BIT(B0,0xf0,0);
    DECLARE_SFR_BIT(B1,0xf0,1);
    DECLARE_SFR_BIT(B2,0xf0,2);
    DECLARE_SFR_BIT(B3,0xf0,3);
    DECLARE_SFR_BIT(B4,0xf0,4);
    DECLARE_SFR_BIT(B5,0xf0,5);
    DECLARE_SFR_BIT(B6,0xf0,6);
    DECLARE_SFR_BIT(B7,0xf0,7);
DECLARE_SFR(EIP,0xf8);
    DECLARE_SFR_BIT(PUSB,0xf8,0);
    DECLARE_SFR_BIT(PI2C,0xf8,1);
    DECLARE_SFR_BIT(PX4,0xf8,2);
    DECLARE_SFR_BIT(PX5,0xf8,3);
    DECLARE_SFR_BIT(PX6,0xf8,4);

DECLARE_XSFR_ARRAY(SCRATCHRAM,0xE000,512);

DECLARE_XSFR_ARRAY(WAVEDATA,0xE400,128);

DECLARE_XSFR(GPCR2,0xe50d);

DECLARE_XSFR(CPUCS,0xe600);
DECLARE_XSFR(IFCONFIG,0xe601);
DECLARE_XSFR(PINFLAGSAB,0xe602);
DECLARE_XSFR(PINFLAGSCD,0xe603);
DECLARE_XSFR(FIFORESET,0xe604);
DECLARE_XSFR(BREAKPT,0xe605);
DECLARE_XSFR(BPADDRH,0xe606);
DECLARE_XSFR(BPADDRL,0xe607);
DECLARE_XSFR(UART230,0xe608);
DECLARE_XSFR(FIFOPINPOLAR,0xe609);
DECLARE_XSFR(REVID,0xe60a);
DECLARE_XSFR(REVCTL,0xe60b);
DECLARE_XSFR(GPIFHOLDAMOUNT,0xe60c);

DECLARE_XSFR(EP1OUTCFG,0xe610);
DECLARE_XSFR(EP1INCFG,0xe611);
DECLARE_XSFR(EP2CFG,0xe612);
DECLARE_XSFR(EP4CFG,0xe613);
DECLARE_XSFR(EP6CFG,0xe614);
DECLARE_XSFR(EP8CFG,0xe615);
DECLARE_XSFR(EP2FIFOCFG,0xe618);
DECLARE_XSFR(EP4FIFOCFG,0xe619);
DECLARE_XSFR(EP6FIFOCFG,0xe61a);
DECLARE_XSFR(EP8FIFOCFG,0xe61b);

DECLARE_XSFR(EP2AUTOINLENH,0xe620);
DECLARE_XSFR(EP2AUTOINLENL,0xe621);
DECLARE_XSFR(EP4AUTOINLENH,0xe622);
DECLARE_XSFR(EP4AUTOINLENL,0xe623);
DECLARE_XSFR(EP6AUTOINLENH,0xe624);
DECLARE_XSFR(EP6AUTOINLENL,0xe625);
DECLARE_XSFR(EP8AUTOINLENH,0xe626);
DECLARE_XSFR(EP8AUTOINLENL,0xe627);
DECLARE_XSFR(ECCCFG,0xe628);
DECLARE_XSFR(ECCRESET,0xe629);
DECLARE_XSFR(ECC1B0,0xe62a);
DECLARE_XSFR(ECC1B1,0xe62b);
DECLARE_XSFR(ECC1B2,0xe62c);
DECLARE_XSFR(ECC2B0,0xe62d);
DECLARE_XSFR(ECC2B1,0xe62e);
DECLARE_XSFR(ECC2B2,0xe62f);

DECLARE_XSFR(EP2FIFOPFH,0xe630);
DECLARE_XSFR(EP2FIFOPFL,0xe631);
DECLARE_XSFR(EP4FIFOPFH,0xe632);
DECLARE_XSFR(EP4FIFOPFL,0xe633);
DECLARE_XSFR(EP6FIFOPFH,0xe634);
DECLARE_XSFR(EP6FIFOPFL,0xe635);
DECLARE_XSFR(EP8FIFOPFH,0xe636);
DECLARE_XSFR(EP8FIFOPFL,0xe637);

DECLARE_XSFR(EP2ISOINPKTS,0xe640);
DECLARE_XSFR(EP4ISOINPKTS,0xe641);
DECLARE_XSFR(EP6ISOINPKTS,0xe642);
DECLARE_XSFR(EP8ISOINPKTS,0xe643);
DECLARE_XSFR(INPKTEND,0xe648);
DECLARE_XSFR(OUTPKTEND,0xe649);

DECLARE_XSFR(EP2FIFOIE,0xe650);
DECLARE_XSFR(EP2FIFOIRQ,0xe651);
DECLARE_XSFR(EP4FIFOIE,0xe652);
DECLARE_XSFR(EP4FIFOIRQ,0xe653);
DECLARE_XSFR(EP6FIFOIE,0xe654);
DECLARE_XSFR(EP6FIFOIRQ,0xe655);
DECLARE_XSFR(EP8FIFOIE,0xe656);
DECLARE_XSFR(EP8FIFOIRQ,0xe657);
DECLARE_XSFR(IBNIE,0xe658);
DECLARE_XSFR(IBNIRQ,0xe659);
DECLARE_XSFR(NAKIE,0xe65a);
DECLARE_XSFR(NAKIRQ,0xe65b);
DECLARE_XSFR(USBIE,0xe65c);
DECLARE_XSFR(USBIRQ,0xe65d);
DECLARE_XSFR(EPIE,0xe65e);
DECLARE_XSFR(EPIRQ,0xe65f);

DECLARE_XSFR(GPIFIE,0xe660);
DECLARE_XSFR(GPIFIRQ,0xe661);
DECLARE_XSFR(USBERRIE,0xe662);
DECLARE_XSFR(USBERRIRQ,0xe663);
DECLARE_XSFR(ERRCNTLIM,0xe664);
DECLARE_XSFR(CLRERRCNT,0xe665);
DECLARE_XSFR(INT2IVEC,0xe666);
DECLARE_XSFR(INT4IVEC,0xe667);
DECLARE_XSFR(INTSETUP,0xe668);

DECLARE_XSFR(PORTACFG,0xe670);
DECLARE_XSFR(PORTCCFG,0xe671);
DECLARE_XSFR(PORTECFG,0xe672);
DECLARE_XSFR(I2CS,0xe678);
DECLARE_XSFR(I2DAT,0xe679);
DECLARE_XSFR(I2CTL,0xe67a);
DECLARE_XSFR(XAUTODAT1,0xe67b);
DECLARE_XSFR(XAUTODAT2,0xe67c);
DECLARE_XSFR(UDMACRCH,0xe67d);
DECLARE_XSFR(UDMACRCL,0xe67e);
DECLARE_XSFR(UDMACRCQUALIFIER,0xe67f);

DECLARE_XSFR(USBCS,0xe680);
DECLARE_XSFR(SUSPEND,0xe681);
DECLARE_XSFR(WAKEUPCS,0xe682);
DECLARE_XSFR(TOGCTL,0xe683);
DECLARE_XSFR(USBFRAMEH,0xe684);
DECLARE_XSFR(USBFRAMEL,0xe685);
DECLARE_XSFR(MICROFRAME,0xe686);
DECLARE_XSFR(FNADDR,0xe687);
DECLARE_XSFR(EP0BCH,0xe68a);
DECLARE_XSFR(EP0BCL,0xe68b);
DECLARE_XSFR(EP1OUTBC,0xe68d);
DECLARE_XSFR(EP1INBC,0xe68f);

DECLARE_XSFR(EP2BCH,0xe690);
DECLARE_XSFR(EP2BCL,0xe691);
DECLARE_XSFR(EP4BCH,0xe694);
DECLARE_XSFR(EP4BCL,0xe695);
DECLARE_XSFR(EP6BCH,0xe698);
DECLARE_XSFR(EP6BCL,0xe699);
DECLARE_XSFR(EP8BCH,0xe69c);
DECLARE_XSFR(EP8BCL,0xe69d);

DECLARE_XSFR(EP0CS,0xe6a0);
DECLARE_XSFR(EP1OUTCS,0xe6a1);
DECLARE_XSFR(EP1INCS,0xe6a2);
DECLARE_XSFR(EP2CS,0xe6a3);
DECLARE_XSFR(EP4CS,0xe6a4);
DECLARE_XSFR(EP6CS,0xe6a5);
DECLARE_XSFR(EP8CS,0xe6a6);
DECLARE_XSFR(EP2FIFOFLGS,0xe6a7);
DECLARE_XSFR(EP4FIFOFLGS,0xe6a8);
DECLARE_XSFR(EP6FIFOFLGS,0xe6a9);
DECLARE_XSFR(EP8FIFOFLGS,0xe6aa);
DECLARE_XSFR(EP2FIFOBCH,0xe6ab);
DECLARE_XSFR(EP2FIFOBCL,0xe6ac);
DECLARE_XSFR(EP4FIFOBCH,0xe6ad);
DECLARE_XSFR(EP4FIFOBCL,0xe6ae);
DECLARE_XSFR(EP6FIFOBCH,0xe6af);

DECLARE_XSFR(EP6FIFOBCL,0xe6b0);
DECLARE_XSFR(EP8FIFOBCH,0xe6b1);
DECLARE_XSFR(EP8FIFOBCL,0xe6b2);
DECLARE_XSFR(SUDPTRH,0xe6b3);
DECLARE_XSFR(SUDPTRL,0xe6b4);
DECLARE_XSFR(SUDPTRCTL,0xe6b5);
DECLARE_XSFR_ARRAY(SETUPDAT,0xe6b8,8);

DECLARE_XSFR(GPIFWFSELECT,0xe6c0);
DECLARE_XSFR(GPIFIDLECS,0xe6c1);
DECLARE_XSFR(GPIFIDLECTL,0xe6c2);
DECLARE_XSFR(GPIFCTLCFG,0xe6c3);
DECLARE_XSFR(GPIFADRH,0xe6c4);
DECLARE_XSFR(GPIFADRL,0xe6c5);
DECLARE_XSFR(FLOWSTATE,0xe6c6);
DECLARE_XSFR(FLOWLOGIC,0xe6c7);
DECLARE_XSFR(FLOWEQ0CTL,0xe6c8);
DECLARE_XSFR(FLOWEQ1CTL,0xe6c9);
DECLARE_XSFR(FLOWHOLDOFF,0xe6ca);
DECLARE_XSFR(FLOWSTB,0xe6cb);
DECLARE_XSFR(FLOWSTBEDGE,0xe6cc);
DECLARE_XSFR(FLOWSTBHPERIOD,0xe6cd);
DECLARE_XSFR(GPIFTCB3,0xe6ce);
DECLARE_XSFR(GPIFTCB2,0xe6cf);

DECLARE_XSFR(GPIFTCB1,0xe6d0);
DECLARE_XSFR(GPIFTCB0,0xe6d1);
DECLARE_XSFR(EP2GPIFFLGSEL,0xe6d2);
DECLARE_XSFR(EP2GPIFPFSTOP,0xe6d3);
DECLARE_XSFR(EP2GPIFTRIG,0xe6d4);
DECLARE_XSFR(EP4GPIFFLGSEL,0xe6da);
DECLARE_XSFR(EP4GPIFPFSTOP,0xe6db);
DECLARE_XSFR(EP4GPIFTRIG,0xe6dc);

DECLARE_XSFR(EP6GPIFFLGSEL,0xe6e2);
DECLARE_XSFR(EP6GPIFPFSTOP,0xe6e3);
DECLARE_XSFR(EP6GPIFTRIG,0xe6e4);
DECLARE_XSFR(EP8GPIFFLGSEL,0xe6ea);
DECLARE_XSFR(EP8GPIFPFSTOP,0xe6eb);
DECLARE_XSFR(EP8GPIFTRIG,0xe6ec);

DECLARE_XSFR(XGPIFSGLDATH,0xe6f0);
DECLARE_XSFR(XGPIFSGLDATLX,0xe6f1);
DECLARE_XSFR(XGPIFSGLDATLNOX,0xe6f2);
DECLARE_XSFR(GPIFREADYCFG,0xe6f3);
DECLARE_XSFR(GPIFREADYSTAT,0xe6f4);
DECLARE_XSFR(GPIFABORT,0xe6f5);

DECLARE_XSFR_ARRAY(EP0BUF,0xE740,64);
DECLARE_XSFR_ARRAY(EP1OUTBUF,0xE780,64);
DECLARE_XSFR_ARRAY(EP1INBUF,0xE7c0,64);

DECLARE_XSFR_ARRAY(EP2FIFOBUF,0xf000,1024);
DECLARE_XSFR_ARRAY(EP4FIFOBUF,0xf400,1024);
DECLARE_XSFR_ARRAY(EP6FIFOBUF,0xf800,1024);
DECLARE_XSFR_ARRAY(EP8FIFOBUF,0xfc00,1024);

#if defined(USE_SUDAV_ISR)||\
  defined(USE_SOF_ISR)||\
  defined(USE_SUTOK_ISR)||\
  defined(USE_SUSPEND_ISR)||\
  defined(USE_USBRESET_ISR)||\
  defined(USE_HISPEED_ISR)||\
  defined(USE_EP0ACK_ISR)||\
  defined(USE_EP0IN_ISR)||\
  defined(USE_EP0OUT_ISR)||\
  defined(USE_EP1IN_ISR)||\
  defined(USE_EP1OUT_ISR)||\
  defined(USE_EP2_ISR)||\
  defined(USE_EP4_ISR)||\
  defined(USE_EP6_ISR)||\
  defined(USE_EP8_ISR)||\
  defined(USE_IBN_ISR)||\
  defined(USE_EP0PING_ISR)||\
  defined(USE_EP1PING_ISR)||\
  defined(USE_EP2PING_ISR)||\
  defined(USE_EP4PING_ISR)||\
  defined(USE_EP6PING_ISR)||\
  defined(USE_EP8PING_ISR)||\
  defined(USE_ERRLIMIT_ISR)||\
  defined(USE_EP2ISOERR_ISR)||\
  defined(USE_EP4ISOERR_ISR)||\
  defined(USE_EP6ISOERR_ISR)||\
  defined(USE_EP8ISOERR_ISR)
    #define USE_INT2AV
#endif

#if defined(USE_EP2PF_ISR)||\
  defined(USE_EP4PF_ISR)||\
  defined(USE_EP6PF_ISR)||\
  defined(USE_EP8PF_ISR)||\
  defined(USE_EP2EF_ISR)||\
  defined(USE_EP4EF_ISR)||\
  defined(USE_EP6EF_ISR)||\
  defined(USE_EP8EF_ISR)||\
  defined(USE_EP2FF_ISR)||\
  defined(USE_EP4FF_ISR)||\
  defined(USE_EP6FF_ISR)||\
  defined(USE_EP8FF_ISR)||\
  defined(USE_GPIFDONE_ISR)||\
  defined(USE_GPIFWF_ISR)
    #define USE_INT4AV
#endif

#if defined(USE_INT4_ISR)&&defined(USE_INT4AV)
    #error USE_INT4_ISR cannot be defined while any of INT4AV interrupts used
#endif

#ifdef USE_INT0_ISR
    DECLARE_ISR(INT0_ISR);
    #define IMPLEMENT_INT0_ISR     IMPLEMENT_ISR(INT0_ISR)
    #define SET_PRIO_HIGH_INT0_ISR do{PX0=1;}while(0)
    #define SET_PRIO_LOW_INT0_ISR  do{PX0=0;}while(0)
    #define ENABLE_INT0_ISR        do{EX0=1;}while(0)
    #define DISABLE_INT0_ISR       do{EX0=0;}while(0)
    #define ACK_INT0_ISR           do{}while(0)
#endif

#ifdef USE_TIMER0_ISR
    DECLARE_ISR(TIMER0_ISR);
    #define IMPLEMENT_TIMER0_ISR     IMPLEMENT_ISR(TIMER0_ISR)
    #define SET_PRIO_HIGH_TIMER0_ISR do{PT0=1;}while(0)
    #define SET_PRIO_LOW_TIMER0_ISR  do{PT0=0;}while(0)
    #define ENABLE_TIMER0_ISR        do{ET0=1;}while(0)
    #define DISABLE_TIMER0_ISR       do{ET0=0;}while(0)
    #define ACK_TIMER0_ISR           do{}while(0)
#endif

#ifdef USE_INT1_ISR
    DECLARE_ISR(INT1_ISR);
    #define IMPLEMENT_INT1_ISR     IMPLEMENT_ISR(INT1_ISR)
    #define SET_PRIO_HIGH_INT1_ISR do{PX1=1;}while(0)
    #define SET_PRIO_LOW_INT1_ISR  do{PX1=0;}while(0)
    #define ENABLE_INT1_ISR        do{EX1=1;}while(0)
    #define DISABLE_INT1_ISR       do{EX1=0;}while(0)
    #define ACK_INT1_ISR           do{}while(0)
#endif

#ifdef USE_TIMER1_ISR
    DECLARE_ISR(TIMER1_ISR);
    #define IMPLEMENT_TIMER1_ISR     IMPLEMENT_ISR(TIMER1_ISR)
    #define SET_PRIO_HIGH_TIMER1_ISR do{PT1=1;}while(0)
    #define SET_PRIO_LOW_TIMER1_ISR  do{PT1=0;}while(0)
    #define ENABLE_TIMER1_ISR        do{ET1=1;}while(0)
    #define DISABLE_TIMER1_ISR       do{ET1=0;}while(0)
    #define ACK_TIMER1_ISR           do{}while(0)
#endif

#ifdef USE_USART0_ISR
    DECLARE_ISR(USART0_ISR);
    #define IMPLEMENT_USART0_ISR     IMPLEMENT_ISR(USART0_ISR)
    #define SET_PRIO_HIGH_USART0_ISR do{PS0=1;}while(0)
    #define SET_PRIO_LOW_USART0_ISR  do{PS0=0;}while(0)
    #define ENABLE_USART0_ISR        do{ES0=1;}while(0)
    #define DISABLE_USART0_ISR       do{ES0=0;}while(0)
    #define ACK_USART0_ISR           do{TI_0=0;RI_0=0;}while(0)
#endif

#ifdef USE_TIMER2_ISR
    DECLARE_ISR(TIMER2_ISR);
    #define IMPLEMENT_TIMER2_ISR     IMPLEMENT_ISR(TIMER2_ISR)
    #define SET_PRIO_HIGH_TIMER2_ISR do{PT2=1;}while(0)
    #define SET_PRIO_LOW_TIMER2_ISR  do{PT2=0;}while(0)
    #define ENABLE_TIMER2_ISR        do{ET2=1;}while(0)
    #define DISABLE_TIMER2_ISR       do{ET2=0;}while(0)
    #define ACK_TIMER2_ISR           do{TF2=0;EXF2=0;}while(0)
#endif

#ifdef USE_WAKEUP_ISR
    DECLARE_ISR(WAKEUP_ISR);
    #define IMPLEMENT_WAKEUP_ISR IMPLEMENT_ISR(WAKEUP_ISR)
    #define ENABLE_WAKEUP_ISR    do{ERESI=1;}while(0)
    #define DISABLE_WAKEUP_ISR   do{ERESI=0;}while(0)
    #define ACK_WAKEUP_ISR       do{RESI=0;}while(0)
#endif

#ifdef USE_USART1_ISR
    DECLARE_ISR(USART1_ISR);
    #define IMPLEMENT_USART1_ISR     IMPLEMENT_ISR(USART1_ISR)
    #define SET_PRIO_HIGH_USART1_ISR do{PS1=1;}while(0)
    #define SET_PRIO_LOW_USART1_ISR  do{PS1=0;}while(0)
    #define ENABLE_USART1_ISR        do{ES1=1;}while(0)
    #define DISABLE_USART1_ISR       do{ES1=0;}while(0)
    #define ACK_USART1_ISR           do{TI_1=0;RI_1=0;}while(0)
#endif

#ifdef USE_INT2AV
    #define SETUP_INT2AV         do{INTSETUP|=BIT3;}while(0)
    #define SET_PRIO_HIGH_INT2AV do{PUSB=1;}while(0)
    #define SET_PRIO_LOW_INT2AV  do{PUSB=0;}while(0)
    #define ENABLE_INT2AV        do{EUSB=1;}while(0)
    #define DISABLE_INT2AV       do{EUSB=0;}while(0)
    #define ACK_INT2AV_ANY       do{ATOMIC_AND(EXIF,~BIT4);INT2CLR=0;}while(0)
    #define ACK_INT2AV(reg,bit)  do{ATOMIC_AND(EXIF,~BIT4);reg=bit;}while(0)
//    #define ACK_INT2AV(reg,bit)  ACK_INT2AV_ANY
#endif

#ifdef USE_I2C_ISR
    DECLARE_ISR(I2C_ISR);
    #define IMPLEMENT_I2C_ISR     IMPLEMENT_ISR(I2C_ISR)
    #define SET_PRIO_HIGH_I2C_ISR do{PI2C=1;}while(0)
    #define SET_PRIO_LOW_I2C_ISR  do{PI2C=0;}while(0)
    #define ENABLE_I2C_ISR        do{EI2C=1;}while(0)
    #define DISABLE_I2C_ISR       do{EI2C=0;}while(0)
    #define ACK_I2C_ISR           ATOMIC_AND(EXIF,~BIT5)
#endif

#ifdef USE_INT4AV
    #define SETUP_INT4AV         do{INTSETUP|=BIT0|BIT1;}while(0)
    #define SET_PRIO_HIGH_INT4AV do{PX4=1;}while(0)
    #define SET_PRIO_LOW_INT4AV  do{PX4=0;}while(0)
    #define ENABLE_INT4AV        do{EX4=1;}while(0)
    #define DISABLE_INT4AV       do{EX4=0;}while(0)
    #define ACK_INT4AV_ANY       do{ATOMIC_AND(EXIF,~BIT6);INT4CLR=0;}while(0)
    #define ACK_INT4AV(reg,bit)  do{ATOMIC_AND(EXIF,~BIT6);reg=bit;}while(0)
//    #define ACK_INT4AV(reg,bit)  ACK_INT4AV_ANY
#endif

#ifdef USE_INT4_ISR
    DECLARE_ISR(INT4_ISR);
    #define IMPLEMENT_INT4_ISR     IMPLEMENT_ISR(INT4_ISR)
    #define SET_PRIO_HIGH_INT4_ISR do{PX4=1;}while(0)
    #define SET_PRIO_LOW_INT4_ISR  do{PX4=0;}while(0)
    #define ENABLE_INT4_ISR        do{EX4=1;}while(0)
    #define DISABLE_INT4_ISR       do{EX4=0;}while(0)
    #define ACK_INT4_ISR           ATOMIC_AND(EXIF,~BIT6)
#endif

#ifdef USE_INT5_ISR
    DECLARE_ISR(INT5_ISR);
    #define IMPLEMENT_INT5_ISR     IMPLEMENT_ISR(INT5_ISR)
    #define SET_PRIO_HIGH_INT5_ISR do{PX5=1;}while(0)
    #define SET_PRIO_LOW_INT5_ISR  do{PX5=0;}while(0)
    #define ENABLE_INT5_ISR        do{EX5=1;}while(0)
    #define DISABLE_INT5_ISR       do{EX5=0;}while(0)
    #define ACK_INT5_ISR           ATOMIC_AND(EXIF,~BIT7)
#endif

#ifdef USE_INT6_ISR
    DECLARE_ISR(INT6_ISR);
    #define IMPLEMENT_INT6_ISR     IMPLEMENT_ISR(INT6_ISR)
    #define SET_PRIO_HIGH_INT6_ISR do{PX6=1;}while(0)
    #define SET_PRIO_LOW_INT6_ISR  do{PX6=0;}while(0)
    #define ENABLE_INT6_ISR        do{EX6=1;}while(0)
    #define DISABLE_INT6_ISR       do{EX6=0;}while(0)
    #define ACK_INT6_ISR           do{INT6=0;}while(0)
#endif

#ifdef USE_SUDAV_ISR
    DECLARE_ISR(SUDAV_ISR);
    #define IMPLEMENT_SUDAV_ISR IMPLEMENT_ISR(SUDAV_ISR)
    #define ENABLE_SUDAV_ISR  do{USBIE|= BIT0;}while(0)
    #define DISABLE_SUDAV_ISR do{USBIE&=~BIT0;}while(0)
    #define ACK_SUDAV_ISR     ACK_INT2AV(USBIRQ,BIT0)
#endif

#ifdef USE_SOF_ISR
    DECLARE_ISR(SOF_ISR);
    #define IMPLEMENT_SOF_ISR IMPLEMENT_ISR(SOF_ISR)
    #define ENABLE_SOF_ISR  do{USBIE|= BIT1;}while(0)
    #define DISABLE_SOF_ISR do{USBIE&=~BIT1;}while(0)
    #define ACK_SOF_ISR     ACK_INT2AV(USBIRQ,BIT1)
#endif

#ifdef USE_SUTOK_ISR
    DECLARE_ISR(SUTOK_ISR);
    #define IMPLEMENT_SUTOK_ISR IMPLEMENT_ISR(SUTOK_ISR)
    #define ENABLE_SUTOK_ISR  do{USBIE|= BIT2;}while(0)
    #define DISABLE_SUTOK_ISR do{USBIE&=~BIT2;}while(0)
    #define ACK_SUTOK_ISR     ACK_INT2AV(USBIRQ,BIT2)
#endif

#ifdef USE_SUSPEND_ISR
    DECLARE_ISR(SUSPEND_ISR);
    #define IMPLEMENT_SUSPEND_ISR IMPLEMENT_ISR(SUSPEND_ISR)
    #define ENABLE_SUSPEND_ISR  do{USBIE|= BIT3;}while(0)
    #define DISABLE_SUSPEND_ISR do{USBIE&=~BIT3;}while(0)
    #define ACK_SUSPEND_ISR     ACK_INT2AV(USBIRQ,BIT3)
#endif

#ifdef USE_USBRESET_ISR
    DECLARE_ISR(USBRESET_ISR);
    #define IMPLEMENT_USBRESET_ISR IMPLEMENT_ISR(USBRESET_ISR)
    #define ENABLE_USBRESET_ISR  do{USBIE|= BIT4;}while(0)
    #define DISABLE_USBRESET_ISR do{USBIE&=~BIT4;}while(0)
    #define ACK_USBRESET_ISR     ACK_INT2AV(USBIRQ,BIT4)
#endif

#ifdef USE_HISPEED_ISR
    DECLARE_ISR(HISPEED_ISR);
    #define IMPLEMENT_HISPEED_ISR IMPLEMENT_ISR(HISPEED_ISR)
    #define ENABLE_HISPEED_ISR  do{USBIE|= BIT5;}while(0)
    #define DISABLE_HISPEED_ISR do{USBIE&=~BIT5;}while(0)
    #define ACK_HISPEED_ISR     ACK_INT2AV(USBIRQ,BIT5)
#endif

#ifdef USE_EP0ACK_ISR
    DECLARE_ISR(EP0ACK_ISR);
    #define IMPLEMENT_EP0ACK_ISR IMPLEMENT_ISR(EP0ACK_ISR)
    #define ENABLE_EP0ACK_ISR  do{USBIE|= BIT6;}while(0)
    #define DISABLE_EP0ACK_ISR do{USBIE&=~BIT6;}while(0)
    #define ACK_EP0ACK_ISR     ACK_INT2AV(USBIRQ,BIT6)
#endif

#ifdef USE_EP0IN_ISR
    DECLARE_ISR(EP0IN_ISR);
    #define IMPLEMENT_EP0IN_ISR IMPLEMENT_ISR(EP0IN_ISR)
    #define ENABLE_EP0IN_ISR  do{EPIE|= BIT0;}while(0)
    #define DISABLE_EP0IN_ISR do{EPIE&=~BIT0;}while(0)
    #define ACK_EP0IN_ISR     ACK_INT2AV(EPIRQ,BIT0)
#endif

#ifdef USE_EP0OUT_ISR
    DECLARE_ISR(EP0OUT_ISR);
    #define IMPLEMENT_EP0OUT_ISR IMPLEMENT_ISR(EP0OUT_ISR)
    #define ENABLE_EP0OUT_ISR  do{EPIE|= BIT1;}while(0)
    #define DISABLE_EP0OUT_ISR do{EPIE&=~BIT1;}while(0)
    #define ACK_EP0OUT_ISR     ACK_INT2AV(EPIRQ,BIT1)
#endif

#ifdef USE_EP1IN_ISR
    DECLARE_ISR(EP1IN_ISR);
    #define IMPLEMENT_EP1IN_ISR IMPLEMENT_ISR(EP1IN_ISR)
    #define ENABLE_EP1IN_ISR  do{EPIE|= BIT2;}while(0)
    #define DISABLE_EP1IN_ISR do{EPIE&=~BIT2;}while(0)
    #define ACK_EP1IN_ISR     ACK_INT2AV(EPIRQ,BIT2)
#endif

#ifdef USE_EP1OUT_ISR
    DECLARE_ISR(EP1OUT_ISR);
    #define IMPLEMENT_EP1OUT_ISR IMPLEMENT_ISR(EP1OUT_ISR)
    #define ENABLE_EP1OUT_ISR  do{EPIE|= BIT3;}while(0)
    #define DISABLE_EP1OUT_ISR do{EPIE&=~BIT3;}while(0)
    #define ACK_EP1OUT_ISR     ACK_INT2AV(EPIRQ,BIT3)
#endif

#ifdef USE_EP2_ISR
    DECLARE_ISR(EP2_ISR);
    #define IMPLEMENT_EP2_ISR IMPLEMENT_ISR(EP2_ISR)
    #define ENABLE_EP2_ISR  do{EPIE|= BIT4;}while(0)
    #define DISABLE_EP2_ISR do{EPIE&=~BIT4;}while(0)
    #define ACK_EP2_ISR     ACK_INT2AV(EPIRQ,BIT4)
#endif

#ifdef USE_EP4_ISR
    DECLARE_ISR(EP4_ISR);
    #define IMPLEMENT_EP4_ISR IMPLEMENT_ISR(EP4_ISR)
    #define ENABLE_EP4_ISR  do{EPIE|= BIT5;}while(0)
    #define DISABLE_EP4_ISR do{EPIE&=~BIT5;}while(0)
    #define ACK_EP4_ISR     ACK_INT2AV(EPIRQ,BIT5)
#endif

#ifdef USE_EP6_ISR
    DECLARE_ISR(EP6_ISR);
    #define IMPLEMENT_EP6_ISR IMPLEMENT_ISR(EP6_ISR)
    #define ENABLE_EP6_ISR  do{EPIE|= BIT6;}while(0)
    #define DISABLE_EP6_ISR do{EPIE&=~BIT6;}while(0)
    #define ACK_EP6_ISR     ACK_INT2AV(EPIRQ,BIT6)
#endif

#ifdef USE_EP8_ISR
    DECLARE_ISR(EP8_ISR);
    #define IMPLEMENT_EP8_ISR IMPLEMENT_ISR(EP8_ISR)
    #define ENABLE_EP8_ISR  do{EPIE|= BIT7;}while(0)
    #define DISABLE_EP8_ISR do{EPIE&=~BIT7;}while(0)
    #define ACK_EP8_ISR     ACK_INT2AV(EPIRQ,BIT7)
#endif

#ifdef USE_IBN_ISR
    DECLARE_ISR(IBN_ISR);
    #define IMPLEMENT_IBN_ISR IMPLEMENT_ISR(IBN_ISR)
    #define ENABLE_IBN_ISR  do{NAKIE|= BIT0;}while(0)
    #define DISABLE_IBN_ISR do{NAKIE&=~BIT0;}while(0)
    #define ACK_IBN_ISR     ACK_INT2AV(NAKIRQ,BIT0)
#endif

#ifdef USE_EP0PING_ISR
    DECLARE_ISR(EP0PING_ISR);
    #define IMPLEMENT_EP0PING_ISR IMPLEMENT_ISR(EP0PING_ISR)
    #define ENABLE_EP0PING_ISR  do{NAKIE|= BIT2;}while(0)
    #define DISABLE_EP0PING_ISR do{NAKIE&=~BIT2;}while(0)
    #define ACK_EP0PING_ISR     ACK_INT2AV(NAKIRQ,BIT2)
#endif

#ifdef USE_EP1PING_ISR
    DECLARE_ISR(EP1PING_ISR);
    #define IMPLEMENT_EP1PING_ISR IMPLEMENT_ISR(EP1PING_ISR)
    #define ENABLE_EP1PING_ISR  do{NAKIE|= BIT3;}while(0)
    #define DISABLE_EP1PING_ISR do{NAKIE&=~BIT3;}while(0)
    #define ACK_EP1PING_ISR     ACK_INT2AV(NAKIRQ,BIT3)
#endif

#ifdef USE_EP2PING_ISR
    DECLARE_ISR(EP2PING_ISR);
    #define IMPLEMENT_EP2PING_ISR IMPLEMENT_ISR(EP2PING_ISR)
    #define ENABLE_EP2PING_ISR  do{NAKIE|= BIT4;}while(0)
    #define DISABLE_EP2PING_ISR do{NAKIE&=~BIT4;}while(0)
    #define ACK_EP2PING_ISR     ACK_INT2AV(NAKIRQ,BIT4)
#endif

#ifdef USE_EP4PING_ISR
    DECLARE_ISR(EP4PING_ISR);
    #define IMPLEMENT_EP4PING_ISR IMPLEMENT_ISR(EP4PING_ISR)
    #define ENABLE_EP4PING_ISR  do{NAKIE|= BIT5;}while(0)
    #define DISABLE_EP4PING_ISR do{NAKIE&=~BIT5;}while(0)
    #define ACK_EP4PING_ISR     ACK_INT2AV(NAKIRQ,BIT5)
#endif

#ifdef USE_EP6PING_ISR
    DECLARE_ISR(EP6PING_ISR);
    #define IMPLEMENT_EP6PING_ISR IMPLEMENT_ISR(EP6PING_ISR)
    #define ENABLE_EP6PING_ISR  do{NAKIE|= BIT6;}while(0)
    #define DISABLE_EP6PING_ISR do{NAKIE&=~BIT6;}while(0)
    #define ACK_EP6PING_ISR     ACK_INT2AV(NAKIRQ,BIT6)
#endif

#ifdef USE_EP8PING_ISR
    DECLARE_ISR(EP8PING_ISR);
    #define IMPLEMENT_EP8PING_ISR IMPLEMENT_ISR(EP8PING_ISR)
    #define ENABLE_EP8PING_ISR  do{NAKIE|= BIT7;}while(0)
    #define DISABLE_EP8PING_ISR do{NAKIE&=~BIT7;}while(0)
    #define ACK_EP8PING_ISR     ACK_INT2AV(NAKIRQ,BIT7)
#endif

#ifdef USE_ERRLIMIT_ISR
    DECLARE_ISR(ERRLIMIT_ISR);
    #define IMPLEMENT_ERRLIMIT_ISR IMPLEMENT_ISR(ERRLIMIT_ISR)
    #define ENABLE_ERRLIMIT_ISR  do{USBERRIE|= BIT0;}while(0)
    #define DISABLE_ERRLIMIT_ISR do{USBERRIE&=~BIT0;}while(0)
    #define ACK_ERRLIMIT_ISR     ACK_INT2AV(USBERRIRQ,BIT0)
#endif

#ifdef USE_EP2ISOERR_ISR
    DECLARE_ISR(EP2ISOERR_ISR);
    #define IMPLEMENT_EP2ISOERR_ISR IMPLEMENT_ISR(EP2ISOERR_ISR)
    #define ENABLE_EP2ISOERR_ISR  do{USBERRIE|= BIT4;}while(0)
    #define DISABLE_EP2ISOERR_ISR do{USBERRIE&=~BIT4;}while(0)
    #define ACK_EP2ISOERR_ISR     ACK_INT2AV(USBERRIRQ,BIT4)
#endif

#ifdef USE_EP4ISOERR_ISR
    DECLARE_ISR(EP4ISOERR_ISR);
    #define IMPLEMENT_EP4ISOERR_ISR IMPLEMENT_ISR(EP4ISOERR_ISR)
    #define ENABLE_EP4ISOERR_ISR  do{USBERRIE|= BIT5;}while(0)
    #define DISABLE_EP4ISOERR_ISR do{USBERRIE&=~BIT5;}while(0)
    #define ACK_EP4ISOERR_ISR     ACK_INT2AV(USBERRIRQ,BIT5)
#endif

#ifdef USE_EP6ISOERR_ISR
    DECLARE_ISR(EP6ISOERR_ISR);
    #define IMPLEMENT_EP6ISOERR_ISR IMPLEMENT_ISR(EP6ISOERR_ISR)
    #define ENABLE_EP6ISOERR_ISR  do{USBERRIE|= BIT6;}while(0)
    #define DISABLE_EP6ISOERR_ISR do{USBERRIE&=~BIT6;}while(0)
    #define ACK_EP6ISOERR_ISR     ACK_INT2AV(USBERRIRQ,BIT6)
#endif

#ifdef USE_EP8ISOERR_ISR
    DECLARE_ISR(EP8ISOERR_ISR);
    #define IMPLEMENT_EP8ISOERR_ISR IMPLEMENT_ISR(EP8ISOERR_ISR)
    #define ENABLE_EP8ISOERR_ISR  do{USBERRIE|= BIT7;}while(0)
    #define DISABLE_EP8ISOERR_ISR do{USBERRIE&=~BIT7;}while(0)
    #define ACK_EP8ISOERR_ISR     ACK_INT2AV(USBERRIRQ,BIT7)
#endif

#ifdef USE_EP2PF_ISR
    DECLARE_ISR(EP2PF_ISR);
    #define IMPLEMENT_EP2PF_ISR IMPLEMENT_ISR(EP2PF_ISR)
    #define ENABLE_EP2PF_ISR  do{EP2FIFOIE|= BIT2;}while(0)
    #define DISABLE_EP2PF_ISR do{EP2FIFOIE&=~BIT2;}while(0)
    #define ACK_EP2PF_ISR     ACK_INT4AV(EP2FIFOIRQ,BIT2)
#endif

#ifdef USE_EP4PF_ISR
    DECLARE_ISR(EP4PF_ISR);
    #define IMPLEMENT_EP4PF_ISR IMPLEMENT_ISR(EP4PF_ISR)
    #define ENABLE_EP4PF_ISR  do{EP4FIFOIE|= BIT2;}while(0)
    #define DISABLE_EP4PF_ISR do{EP4FIFOIE&=~BIT2;}while(0)
    #define ACK_EP4PF_ISR     ACK_INT4AV(EP4FIFOIRQ,BIT2)
#endif

#ifdef USE_EP6PF_ISR
    DECLARE_ISR(EP6PF_ISR);
    #define IMPLEMENT_EP6PF_ISR IMPLEMENT_ISR(EP6PF_ISR)
    #define ENABLE_EP6PF_ISR  do{EP6FIFOIE|= BIT2;}while(0)
    #define DISABLE_EP6PF_ISR do{EP6FIFOIE&=~BIT2;}while(0)
    #define ACK_EP6PF_ISR     ACK_INT4AV(EP6FIFOIRQ,BIT2)
#endif

#ifdef USE_EP8PF_ISR
    DECLARE_ISR(EP8PF_ISR);
    #define IMPLEMENT_EP8PF_ISR IMPLEMENT_ISR(EP8PF_ISR)
    #define ENABLE_EP8PF_ISR  do{EP8FIFOIE|= BIT2;}while(0)
    #define DISABLE_EP8PF_ISR do{EP8FIFOIE&=~BIT2;}while(0)
    #define ACK_EP8PF_ISR     ACK_INT4AV(EP8FIFOIRQ,BIT2)
#endif

#ifdef USE_EP2EF_ISR
    DECLARE_ISR(EP2EF_ISR);
    #define IMPLEMENT_EP2EF_ISR IMPLEMENT_ISR(EP2EF_ISR)
    #define ENABLE_EP2EF_ISR  do{EP2FIFOIE|= BIT1;}while(0)
    #define DISABLE_EP2EF_ISR do{EP2FIFOIE&=~BIT1;}while(0)
    #define ACK_EP2EF_ISR     ACK_INT4AV(EP2FIFOIRQ,BIT1)
#endif

#ifdef USE_EP4EF_ISR
    DECLARE_ISR(EP4EF_ISR);
    #define IMPLEMENT_EP4EF_ISR IMPLEMENT_ISR(EP4EF_ISR)
    #define ENABLE_EP4EF_ISR  do{EP4FIFOIE|= BIT1;}while(0)
    #define DISABLE_EP4EF_ISR do{EP4FIFOIE&=~BIT1;}while(0)
    #define ACK_EP4EF_ISR     ACK_INT4AV(EP4FIFOIRQ,BIT1)
#endif

#ifdef USE_EP6EF_ISR
    DECLARE_ISR(EP6EF_ISR);
    #define IMPLEMENT_EP6EF_ISR IMPLEMENT_ISR(EP6EF_ISR)
    #define ENABLE_EP6EF_ISR  do{EP6FIFOIE|= BIT1;}while(0)
    #define DISABLE_EP6EF_ISR do{EP6FIFOIE&=~BIT1;}while(0)
    #define ACK_EP6EF_ISR     ACK_INT4AV(EP6FIFOIRQ,BIT1)
#endif

#ifdef USE_EP8EF_ISR
    DECLARE_ISR(EP8EF_ISR);
    #define IMPLEMENT_EP8EF_ISR IMPLEMENT_ISR(EP8EF_ISR)
    #define ENABLE_EP8EF_ISR  do{EP8FIFOIE|= BIT1;}while(0)
    #define DISABLE_EP8EF_ISR do{EP8FIFOIE&=~BIT1;}while(0)
    #define ACK_EP8EF_ISR     ACK_INT4AV(EP8FIFOIRQ,BIT1)
#endif

#ifdef USE_EP2FF_ISR
    DECLARE_ISR(EP2FF_ISR);
    #define IMPLEMENT_EP2FF_ISR IMPLEMENT_ISR(EP2FF_ISR)
    #define ENABLE_EP2FF_ISR  do{EP2FIFOIE|= BIT0;}while(0)
    #define DISABLE_EP2FF_ISR do{EP2FIFOIE&=~BIT0;}while(0)
    #define ACK_EP2FF_ISR     ACK_INT4AV(EP2FIFOIRQ,BIT0)
#endif

#ifdef USE_EP4FF_ISR
    DECLARE_ISR(EP4FF_ISR);
    #define IMPLEMENT_EP4FF_ISR IMPLEMENT_ISR(EP4FF_ISR)
    #define ENABLE_EP4FF_ISR  do{EP4FIFOIE|= BIT0;}while(0)
    #define DISABLE_EP4FF_ISR do{EP4FIFOIE&=~BIT0;}while(0)
    #define ACK_EP4FF_ISR     ACK_INT4AV(EP4FIFOIRQ,BIT0)
#endif

#ifdef USE_EP6FF_ISR
    DECLARE_ISR(EP6FF_ISR);
    #define IMPLEMENT_EP6FF_ISR IMPLEMENT_ISR(EP6FF_ISR)
    #define ENABLE_EP6FF_ISR  do{EP6FIFOIE|= BIT0;}while(0)
    #define DISABLE_EP6FF_ISR do{EP6FIFOIE&=~BIT0;}while(0)
    #define ACK_EP6FF_ISR     ACK_INT4AV(EP6FIFOIRQ,BIT0)
#endif

#ifdef USE_EP8FF_ISR
    DECLARE_ISR(EP8FF_ISR);
    #define IMPLEMENT_EP8FF_ISR IMPLEMENT_ISR(EP8FF_ISR)
    #define ENABLE_EP8FF_ISR  do{EP8FIFOIE|= BIT0;}while(0)
    #define DISABLE_EP8FF_ISR do{EP8FIFOIE&=~BIT0;}while(0)
    #define ACK_EP8FF_ISR     ACK_INT4AV(EP8FIFOIRQ,BIT0)
#endif

#ifdef USE_GPIFDONE_ISR
    DECLARE_ISR(GPIFDONE_ISR);
    #define IMPLEMENT_GPIFDONE_ISR IMPLEMENT_ISR(GPIFDONE_ISR)
    #define ENABLE_GPIFDONE_ISR  do{GPIFIE|= BIT0;}while(0)
    #define DISABLE_GPIFDONE_ISR do{GPIFIE&=~BIT0;}while(0)
    #define ACK_GPIFDONE_ISR     ACK_INT4AV(GPIFIRQ,BIT0)
#endif

#ifdef USE_GPIFWF_ISR
    DECLARE_ISR(GPIFWF_ISR);
    #define IMPLEMENT_GPIFWF_ISR IMPLEMENT_ISR(GPIFWF_ISR)
    #define ENABLE_GPIFWF_ISR  do{GPIFIE|= BIT1;}while(0)
    #define DISABLE_GPIFWF_ISR do{GPIFIE&=~BIT1;}while(0)
    #define ACK_GPIFWF_ISR     ACK_INT4AV(GPIFIRQ,BIT1)
#endif

#endif
